#!/bin/bash

# ERPNext 14+ install script with menu, IP detection, domain prompt,
# password generation, and .env output.
# Author: itcxua
# Version: 2.1

set -e  # –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –ø–µ—Ä—à—ñ–π –ø–æ–º–∏–ª—Ü—ñ

# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è ===
# –ü—Ä–∏–π–º–∞—î –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—è —Ç–∞ –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤
# –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —î –ø–æ—Ä–æ–∂–Ω—ñ–º
gen_passwd() {
  local pass="$(tr -dc "$2" < /dev/urandom | head -c "$1")"
  if [ -z "$pass" ]; then
    echo "‚ùå Failed to generate password."
    exit 1
  fi
  echo "$pass"
}

# === –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó ===
# –°—Ç–≤–æ—Ä—é—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
ensure_directory() {
  if ! mkdir -p "$1" 2>/dev/null; then
    echo "‚ùå Error: Failed to create or access $1 directory."
    exit 1
  fi
}

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ—Ä—Ç—ñ–≤ 80 —ñ 443 ===
# –í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ —Å–∞–º–µ –ø–æ—Ä—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
check_ports() {
  local port80_open port443_open
  port80_open=$(ss -tuln | grep -c ':80')
  port443_open=$(ss -tuln | grep -c ':443')

  if [ "$port80_open" -eq 0 ]; then
    echo "‚ùå Port 80 is closed or blocked."
  fi

  if [ "$port443_open" -eq 0 ]; then
    echo "‚ùå Port 443 is closed or blocked."
  fi

  if [ "$port80_open" -eq 0 ] && [ "$port443_open" -eq 0 ]; then
    return 1
  fi
  return 0
}

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ ===
IP_ADDRESS=$(hostname -I | awk '{print $1}')

# === –ó–∞–ø–∏—Ç –¥–æ–º–µ–Ω—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ IP
read -p "üåê Enter domain name (leave empty to use IP: $IP_ADDRESS): " DOMAIN
if [[ -n "$DOMAIN" && ! "$DOMAIN" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
  echo "‚ùå Invalid domain format. Falling back to IP: $IP_ADDRESS"
  DOMAIN="$IP_ADDRESS"
else
  DOMAIN=${DOMAIN:-$IP_ADDRESS}
fi

# === –ó–∞–ø–∏—Ç email (–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∏–ø–æ–≤–æ–≥–æ) ===
default_email="admin@$DOMAIN"
read -p "üìß Use default email ($default_email)? [Y/n]: " email_choice
if [[ "$email_choice" =~ ^([nN])$ ]]; then
  read -p "Enter your email: " EMAIL
else
  EMAIL="$default_email"
fi

# === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—ñ–≤ –¥–ª—è –ë–î —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
DB_PASS=$(gen_passwd $(shuf -i 25-29 -n 1) 'a-zA-Z0-9')
ADMIN_PASS=$(gen_passwd $(shuf -i 20-25 -n 1) 'a-zA-Z0-9')

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ç–∞ –∑–∞–ø–∏—Å .env ===
echo "üìÅ Creating /opt directory if it does not exist..."
ensure_directory /opt
cat <<EOF > /opt/erpnext_install.env
DOMAIN=$DOMAIN
IP_ADDRESS=$IP_ADDRESS
EMAIL=$EMAIL
DB_PASS=$DB_PASS
ADMIN_PASS=$ADMIN_PASS
EOF

# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ ===
echo "üì¶ Updating system..."
if ! apt update || ! apt upgrade -y; then
  echo "‚ùå Failed to update system packages. Please check your sources or internet connection."
  exit 1
fi

# === –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ===
echo "üß∞ Installing dependencies..."
DEPENDENCIES=(python3-dev python3-setuptools python3-pip python3-distutils redis-server mariadb-server mariadb-client software-properties-common nginx curl supervisor certbot python3-certbot-nginx git xvfb libfontconfig wkhtmltopdf libxrender1 libxext6 libxrandr2 libfreetype6 libx11-6 libxcomposite1 libxcursor1 libxdamage1 libxi6 libxtst6 libnss3 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libdbus-1-3)
apt install -y "${DEPENDENCIES[@]}"

# === –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js 16 ===
echo "üß∞ Installing Node.js 16 LTS..."
curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
apt install -y nodejs

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MariaDB ===
echo "üêò Configuring MariaDB..."
systemctl enable mariadb
systemctl start mariadb

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MariaDB
if ! mysqladmin ping -u root --silent; then
  echo "‚ö†Ô∏è Ensure that MariaDB root user does not require a password or adjust the script accordingly."
  sleep 2
  echo "‚ùå Error: Unable to connect to MariaDB as root."
  exit 1
fi

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ MariaDB
mysql -u root <<EOF
SET GLOBAL innodb_file_format = BARRACUDA;
SET GLOBAL innodb_file_per_table = ON;
SET GLOBAL innodb_large_prefix = ON;
CREATE DATABASE IF NOT EXISTS erpnext;
EOF

# === –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Bench CLI ===
echo "üîß Installing bench CLI..."
if ! pip3 install frappe-bench; then
  echo "‚ùå Failed to install frappe-bench. Consider checking pip or using virtualenv."
  exit 1
fi

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Bench ===
echo "üìÅ Initializing bench & Frappe"
ensure_directory /opt/erpnext
cd /opt/erpnext

FRAPPE_BRANCH=version-14
if [ ! -d "frappe-bench" ]; then
  bench init frappe-bench --frappe-branch $FRAPPE_BRANCH
else
  echo "‚ÑπÔ∏è Bench already initialized. Skipping init."
fi
cd frappe-bench

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ERPNext ===
echo "üì¶ Getting ERPNext app..."
if [ ! -d apps/erpnext ]; then
  bench get-app erpnext --branch $FRAPPE_BRANCH
else
  echo "‚ÑπÔ∏è ERPNext app already present. Skipping get-app."
fi

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∞–π—Ç—É —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ===
if ! bench new-site "$DOMAIN" --admin-password "$ADMIN_PASS" --mariadb-root-password "$DB_PASS"; then
  echo "‚ùå Failed to create new ERPNext site. Please check MariaDB password or logs."
  exit 1
fi

if ! bench --site "$DOMAIN" install-app erpnext; then
  echo "‚ùå Failed to install ERPNext app."
  exit 1
fi

# === –ü–µ—Ä–µ—Ö—ñ–¥ —É production-—Ä–µ–∂–∏–º ===
echo "üîÅ Setting up production environment..."
if ! supervisorctl status | grep -q "frappe-bench-web"; then
  if id frappe &>/dev/null; then
    bench setup production frappe --yes
  else
    echo "‚ö†Ô∏è Warning: 'frappe' user not found. Attempting with current user."
    bench setup production $(whoami) --yes
  fi
else
  echo "‚úÖ Production mode already configured. Skipping setup."
fi

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Nginx ===
echo "üåê Configuring Nginx..."
bench setup nginx
NGINX_CONF_PATH="$(pwd)/config/nginx.conf"
if [ -f "$NGINX_CONF_PATH" ]; then
  ln -sf "$NGINX_CONF_PATH" /etc/nginx/sites-enabled/erpnext
else
  echo "‚ùå Nginx config not found at $NGINX_CONF_PATH."
  exit 1
fi
nginx -t && systemctl reload nginx

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è SSL-—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞ ===
echo "üîê Obtaining SSL certificate..."
if ! certbot certificates | grep -q "Domains: $DOMAIN"; then
  if ! check_ports; then
    echo "‚ùå Error: Required ports 80 or 443 are not open. Please check firewall or network settings."
    exit 1
  fi
  certbot --nginx -d $DOMAIN --non-interactive --agree-tos -m $EMAIL
  echo "üìÅ SSL directory: /etc/letsencrypt/live/$DOMAIN" >> /opt/erpnext_install.env
else
  echo "üîê SSL already exists for $DOMAIN. Skipping issuance."
fi

# === –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ===
echo "‚úÖ ERPNext successfully installed!"
echo "============================================="
echo "üîó Access: https://$DOMAIN"
echo "üìÑ .env saved to: /opt/erpnext_install.env"
echo "üìß Email used: $EMAIL"
echo "üîê DB Password: $DB_PASS"
echo "üîê Admin Password: $ADMIN_PASS"
echo "üîê SSL path: /etc/letsencrypt/live/$DOMAIN"
echo "============================================="
